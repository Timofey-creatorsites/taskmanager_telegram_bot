from asyncio import run
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram import types, F, Bot, Dispatcher
from message_commands import *
from bot_token import *
dp = Dispatcher()
print('Format of info about users is Full_name:tgID')

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
@dp.message(Command('start'))
async def start_bot(message: types.Message):
    full_name, user_id, username = message.from_user.full_name, message.from_user.id, message.from_user.username
    await add_user_to_data_base(user_id, full_name, username)
    print(f'{message.from_user.full_name}:{message.from_user.id} started this bot')

    kb = [
        [types.InlineKeyboardButton(text='–ú–µ–Ω—éüìñ', callback_data='main_menu')], # –ú–µ–Ω—é
        [
        types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë®‚Äçüíª', callback_data='information'), # –ò–Ω—Ñ–æ
        types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤üëë', callback_data='list_of_admins') # –°–ø–∏—Å–æ–∫ –ê–¥–º
        ]]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    photo_data = 'AgACAgIAAxkBAANfZ1cpKZtmA3d5-GKxdt9eZfvaT5AAAqDnMRtq4sBKjGpk29o6-AwBAAMCAAN5AAM2BA'
    text_data = f"\n<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.escape(message.from_user.full_name)}!</b>\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è\n"
    await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)

#=====================================================================================# –ù–∞—á–∞–ª–æ –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ F.Data

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤üëë'
@dp.callback_query( F.data == 'list_of_admins' )
async def admin_list(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n1.@Marzkvüëë'
    await callback.message.edit_caption(caption=text_data,reply_markup=keyboard)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë®‚Äçüíª'
@dp.callback_query( F.data == 'information' )
async def information(callback: types.CallbackQuery):
    kb = [[types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = '1. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏: 13.12.2024'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query( F.data == 'back_to_start' )
async def start_bot_2(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text='–ú–µ–Ω—éüìñ', callback_data='main_menu')], # –ú–µ–Ω—é
        [types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë®‚Äçüíª', callback_data='information'),types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤üëë', callback_data='list_of_admins')], # –ò–Ω—Ñ–æ , –°–ø–∏—Å–æ–∫ –∞–¥–º
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f"\n<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.escape(callback.from_user.full_name)}!</b>\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è\n"
    await callback.message.edit_caption(caption=text_data,reply_markup=keyboard)

@dp.callback_query( F.data == 'commands_of_bot')
async def cmdlist(callback: types.CallbackQuery):
    kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f'1./add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.\n2. /list - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.\n3. /complete –∏–ª–∏ /del - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.\n4. /clist - –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'main_menu' )
async def main_menu(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='back_to_start'), types.InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', callback_data='commands_of_bot')],
        [types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data='create_task')],
        [types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á', callback_data='list_of_tasks'), types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á', callback_data='completed_task_list')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é, –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

#=====================================================================================# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ F.Data



#=====================================================================================# –ù–∞—á–∞–ª–∞ –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ö

# –ö–æ–º–∞–Ω–¥—ã –≤ message_commands.py

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@dp.message( Command( 'add' ) )
async def add_task(message: types.Message):
    msg = html.escape(message.text)
    user_id = message.from_user.id
    text_data = await add_task_to_list(msg, user_id)
    await message.answer(text_data)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@dp.message( Command ('list') )
async def get_list(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_active_task_list(user_id)
    text_data = await get_task_list(tasks)
    await message.answer(text=text_data)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message( Command( 'del' ) )
@dp.message( Command( 'complete' ) )
async def del_task(message: types.Message):
    msg = html.escape(message.text)
    user_id = message.from_user.id
    text_data = await delete_task_from_task_list(msg, user_id)
    await message.answer(text_data)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@dp.message( Command ('Clist') )
@dp.message( Command ('clist') )
async def get_clist(message: types.Message):
    user_id = message.from_user.id
    text_data = await list_of_completed_tasks(user_id)
    await message.answer(text_data)

#=====================================================================================# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ö

# –ï—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.
@dp.message(F.text[0] == '/')
async def wrong_command(message: types.Message):
    msg = message.text
    kb = [[types.InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', callback_data='commands_of_bot')]]
    text_data = f'–í–≤–µ–¥–µ–Ω–Ω–æ–π –≤–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã "{msg}" - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –≤—ã —É–≤–∏–¥–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã'
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    photo_data = 'AgACAgIAAxkBAANfZ1cpKZtmA3d5-GKxdt9eZfvaT5AAAqDnMRtq4sBKjGpk29o6-AwBAAMCAAN5AAM2BA'
    await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –±–æ—Ç–∞')
    token_of_bot = await get_token(input())
    bot = Bot(token=token_of_bot, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) # API –±–æ—Ç–∞
    await dp.start_polling(bot)
if __name__ == "__main__":
    run( main() )